---
alwaysApply: true
---
# Git 最佳实践与规范

本文档概述了使用 Git 管理版本的最佳实践与规范。如果当前目录不是一个 Git 仓库，则先进行初始化。

## 提交策略
- **原子性提交**：每次提交应只包含一个独立、完整的逻辑变更，便于追踪和回滚历史。
- **规范化提交信息**：
    - 必须遵循约定式提交（Conventional Commit）格式。
    - 包含以下要素：
        - **类型（Type）**：如 feature、fix、refactor、others
        - **描述（Description）**：简明扼要地说明变更内容
        - **正文（Body）**：详细阐述变更原因和背景
    - 提交信息应重点说明"为什么"更改，而不仅仅是"做了什么"。建议使用祈使句（如"修复 bug"、"新增功能"）。
- **频繁提交**：每次修改代码之后，及时提交，减少丢失进度的风险，便于问题定位。
- **保证代码质量**：禁止提交无法编译或未通过基本测试的代码。
- **签名提交（可选）**：推荐使用 GPG 签名，提升提交可信度。

## 约定式提交类型
- **feature**：新功能
- **fix**：修复 bug
- **refactor**：代码重构（不影响功能和接口）
- **others**：文档变更、代码格式调整（如空格、缩进等，无业务逻辑变更）、测试相关变更、构建流程以及工具等杂项维护

## 分支管理
- **分支模型**：推荐采用 Gitflow 分支管理规范。
- **功能分支**：每个新功能或 bug 修复应单独创建功能分支或者修复分支，便于隔离和评审。
- **短生命周期**：分支应尽快合并，避免长期存在导致冲突。
- **主分支同步**：定期 rebase 或 merge，保持与 main/develop 等主分支同步。
- **禁止直推主分支**：对主分支的所有更改必须通过 Pull Request 合并。

## 标签管理
- **标记重要发布**：用 tag 标记重要版本或里程碑，名称格式为 "v0.0.1"。
- **语义化版本**：遵循 SemVer 规范（主版本/次版本/补丁）。
- **带注释的 tag**：为 tag 添加注释，补充发布说明。

## 发布流程

- 更新主分支代码
- 主分支合并到当前分支
- 基于当前分支，创建标签
- 生成 Release 说明、自动创建 Release，Release 名称和标签名称一致
- 创建 Pull Request，将当前分支合并到主分支


## 代码评审
- **Pull Request 流程**：所有代码变更均需通过 PR，便于协作和审查。
- **评审清单**：制定评审标准，确保代码一致性和质量。
- **建设性反馈**：评审时聚焦代码改进，避免人身批评。
- **及时响应**：积极响应和处理评审意见。
- **结对编程**：复杂或关键任务建议结对开发。

## 忽略文件管理
- **.gitignore 配置**：排除构建产物、临时文件、密钥等不应被 Git 跟踪的内容。
- **全局 .gitignore**：可配置全局忽略规则，适用于所有仓库。

## 敏感信息管理
- **严禁提交敏感信息**：如密钥、密码、API Key 等。
- **环境变量**：敏感信息应通过环境变量管理，运行时读取。
- **密钥管理工具**：推荐使用 HashiCorp Vault、AWS Secrets Manager 等。
- **加密存储**：如必须存储密文，务必加密（如 git-secret）。

## 子模块与 LFS
- **谨慎使用子模块/子树**：优先考虑包管理器或构建系统，避免不必要的复杂度。
- **充分理解后采用**：如需使用，务必理解其影响。
- **大文件管理**：大文件（如图片、视频）应使用 Git LFS，避免仓库膨胀。
- **正确配置 LFS**：确保 LFS 跟踪配置无误。

## 回滚与重置
- **理解命令区别**：熟悉 `git revert`、`git reset`、`git checkout` 的差异。
- **谨慎操作**：reset/checkout 可能导致数据丢失，需谨慎使用。
- **公共提交用 revert**：已推送到远程的提交应使用 revert 生成反向提交。

## 合并冲突处理
- **理解冲突原因**：先分析冲突根源再处理。
- **沟通协作**：与相关开发者沟通，协同解决。
- **合并工具辅助**：善用合并工具。
- **解决后测试**：冲突解决后务必回归测试。

## 仓库维护
- **定期清理**：清理无用分支和 tag，保持仓库整洁。
- **仓库优化**：定期执行 `git gc` 优化仓库性能。

## 常见陷阱
- **避免意外提交**：防止敏感信息或大文件误提交。
- **注意合并冲突和 reset**：防止因操作不当导致数据丢失。
- **维护 .gitignore**：及时更新忽略规则。

