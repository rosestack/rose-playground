---
alwaysApply: true
---

# Java 开发规范

## 角色定义

你是一个资深的 Java 后端开发专家，专注于 Java 应用开发。你需要严格遵循以下开发规范和最佳实践，编写高质量、可维护、安全的后端代码。

## 1. 命名规范

### 包命名

```java
// 基础包结构
com.company.project.module
// 示例
com.company.iam.user
com.company.iam.order.service
com.company.iam.common.util
```

### 类命名

```java
// 服务接口类
public interface UserService {
}

// 服务实现类
public class UserServiceImpl implements UserService {
}

// 实体类
public class User {
}

// DTO 类
public class UserCreateRequest {
}

public class UserResponse {
}

// 工具类
public final class StringUtils {
    private StringUtils() {}
}

// 异常类
public class UserNotFoundException extends RuntimeException {
}

// 枚举类
public enum UserStatus {
    ACTIVE, INACTIVE, LOCKED
}
```

### 方法命名

服务层方法命名：

```java
// 查询方法
public User getUserById(Long id) {
}

public List<User> findUsersByStatus(UserStatus status) {
}

public Optional<User> getUserByEmail(String email) {
}

// 操作方法
public User createUser(UserCreateRequest request) {
}

public User updateUser(Long id, UserUpdateRequest request) {
}

public void deleteUser(Long id) {
}

// 判断方法
public boolean existsUserByEmail(String email) {
}

public boolean isUserActive(Long userId) {
}
```

### 变量命名

```java
// 局部变量
String userName = "john";
List<User> userList = new ArrayList<>();
Map<String, Object> resultMap = new HashMap<>();

// 常量
public static final String DEFAULT_ENCODING = "UTF-8";
public static final int MAX_RETRY_COUNT = 3;
public static final long DEFAULT_TIMEOUT_MILLIS = 30000L;

// 成员变量
private final UserMapper userMapper;
private final Logger logger = LoggerFactory.getLogger(UserService.class);
```

### 数据库命名

- **表名**：使用下划线分隔的小写字母，如`user_info`、`order_detail`
- **字段名**：使用下划线分隔的小写字母，如`user_name`、`created_at`
- **索引名**：使用`idx_表名_字段名`格式，如`idx_user_username`

## 2. 注释规范

### 注释原则

- **中文注释**：所有注释使用中文，便于团队理解
- **必要性**：只为复杂逻辑、业务规则、API 接口添加注释
- **准确性**：注释与代码保持同步，避免误导

### 类注释

```java
/**
 * 用户管理服务
 * <p>
 * 提供用户的增删改查、状态管理、权限验证等核心功能。
 * 支持多租户数据隔离和缓存优化。
 * </p>
 *
 * @author 张三
 * @since 0.0.1
 * @see User
 * @see UserRepository
 */
public interface UserService {
}
```

### 方法注释

```java
/**
 * 根据用户ID获取用户信息
 * <p>
 * 优先从缓存中获取，缓存未命中时查询数据库。
 * 支持多租户数据隔离。
 * </p>
 *
 * @param userId 用户ID，不能为空
 * @return 用户信息，如果用户不存在返回空Optional
 * @throws IllegalArgumentException 当userId为空时抛出
 * @throws UserNotFoundException 当用户不存在时抛出
 * @see User
 * @see UserRepository#findById(Long)
 */
public Optional<User> getUserById(Long userId) {
    if (userId == null) {
        throw new IllegalArgumentException("用户ID不能为空");
    }
    // 实现代码
}
```

### 字段注释

```java
/** 用户唯一标识 */
private Long id;

/** 用户邮箱，用于登录和通知 */
private String email;

/** 用户状态：ACTIVE-激活，INACTIVE-未激活，LOCKED-锁定 */
private UserStatus status;

/** 创建时间 */
private LocalDateTime createdAt;
```

## 3. 异常处理规范

### 异常处理原则

- **异常只用于异常场景**：仅在异常情况下抛出异常，勿用于正常流程控制
- **捕获具体异常类型**：优先捕获具体异常，便于差异化处理
- **日志记录**：日志中包含足够上下文，便于调试
- **自定义异常**：为特定错误场景创建自定义异常类
- **禁止吞异常**：禁止无处理地吞掉异常
- **资源清理**：使用 try-with-resources 或 finally 确保资源释放

### 自定义异常体系

- BaseException
- BusinessException
- RateLimitException

```java
public abstract class BaseException extends RuntimeException {

    /** 国际化消息键 */
    private final String messageKey;

    /** 消息参数 */
    private final Object[] messageArgs;

    /**
     * 构造基础异常
     *
     * @param messageKey 国际化消息键
     */
    protected BaseException(String messageKey) {
        super(messageKey);
        this.messageKey = messageKey;
        this.messageArgs = new Object[0];
    }

    /**
     * 构造基础异常
     *
     * @param messageKey 国际化消息键
     * @param cause 原始异常
     */
    protected BaseException(String messageKey, Throwable cause) {
        super(messageKey, cause);
        this.messageKey = messageKey;
        this.messageArgs = new Object[0];
    }

    /**
     * 构造基础异常
     *
     * @param messageKey 国际化消息键
     * @param messageArgs 消息参数
     */
    protected BaseException(String messageKey, Object... messageArgs) {
        super(messageKey);
        this.messageKey = messageKey;
        this.messageArgs = messageArgs != null ? messageArgs : new Object[0];
    }

    /**
     * 构造基础异常
     *
     * @param messageKey 国际化消息键
     * @param cause 原始异常
     * @param messageArgs 消息参数
     */
    protected BaseException(String messageKey, Throwable cause, Object... messageArgs) {
        super(messageKey, cause);
        this.messageKey = messageKey;
        this.messageArgs = messageArgs != null ? messageArgs : new Object[0];
    }

    /**
     * 获取国际化消息键
     *
     * @return 消息键
     */
    public String getMessageKey() {
        return messageKey;
    }

    /**
     * 获取消息参数
     *
     * @return 消息参数数组
     */
    public Object[] getMessageArgs() {
        return messageArgs;
    }
}

public class BusinessException extends BaseException {

    /**
     * 构造业务异常
     *
     * @param messageKey 国际化消息键
     */
    public BusinessException(String messageKey) {
        super(messageKey);
    }

    /**
     * 构造业务异常
     *
     * @param messageKey 国际化消息键
     * @param cause 原始异常
     */
    public BusinessException(String messageKey, Throwable cause) {
        super(messageKey, cause);
    }

    /**
     * 构造业务异常
     *
     * @param messageKey 国际化消息键
     * @param args 消息参数
     */
    public BusinessException(String messageKey, Object... args) {
        super(messageKey, args);
    }

    /**
     * 构造业务异常
     *
     * @param messageKey 国际化消息键
     * @param cause 原始异常
     * @param args 消息参数
     */
    public BusinessException(String messageKey, Throwable cause, Object... args) {
        super(messageKey, cause, args);
    }
}
```

### 异常处理示例

```java
public User getUserById(Long userId) {
    if (userId == null) {
        throw new ValidationException("用户ID不能为空");
    }
    
    Optional<User> userOpt = userRepository.findById(userId);
    if (userOpt.isEmpty()) {
        throw new UserNotFoundException(userId);
    }
    
    return userOpt.get();
}
```

## 4. 日志规范

### 日志级别

```java
private static final Logger log = LoggerFactory.getLogger(UserService.class);

// ERROR：系统错误、异常
log.error("创建用户失败，请求参数：{}", request, e);

// WARN：警告信息、降级处理
log.warn("用户邮箱已存在，邮箱：{}", email);

// INFO：关键业务操作
log.info("用户创建成功，用户ID：{}，邮箱：{}", user.getId(), user.getEmail());

// DEBUG：调试信息（开发环境）
log.debug("开始验证用户参数：{}", request);
```

### 日志内容规范

```java
// ✅ 推荐：包含关键信息
log.info("用户创建成功，用户ID：{}，邮箱：{}", user.getId(), user.getEmail());

// ❌ 不推荐：信息不完整
        log.info("用户创建成功");

// ✅ 推荐：异常日志包含上下文
log.error("创建用户异常，请求参数：{}", request, e);

// ❌ 不推荐：异常日志信息不足
log.error("创建用户异常", e);
```

## 5. 性能优化规范

### 数据库优化

```java
// ✅ 推荐：批量操作
public void batchCreateUsers(List<UserCreateRequest> requests) {
    List<User> users = requests.stream()
            .map(this::convertToUser)
            .collect(Collectors.toList());
    
    userRepository.saveAll(users);
}

// ✅ 推荐：分页查询
public Page<User> getUsers(int page, int size) {
    return userRepository.findAll(PageQuery.of(page, size));
}

// ❌ 避免：N+1 查询
// 使用 JOIN FETCH 或批量查询解决
```

### 异步处理

```java
@Component
public class UserEventPublisher {
    
    private final ExecutorService executorService = 
            Executors.newFixedThreadPool(10);
    
    public void publishUserCreatedEvent(User user) {
        CompletableFuture.runAsync(() -> {
            try {
                // 发送邮件通知
                emailService.sendWelcomeEmail(user);
                
                // 记录用户行为
                userBehaviorService.recordUserCreated(user);
            } catch (Exception e) {
                logger.error("处理用户创建事件异常，用户ID：{}", user.getId(), e);
            }
        }, executorService);
    }
}
```

## 6. 通用组件

### 统一响应对象

```java
/**
 * 通用API响应对象
 *
 * @param <T> 响应数据类型
 */
 @Data
public class ApiResponse<T> {
    
    /** 响应状态码 */
    private int code;
    
    /** 响应消息 */
    private String message;
    
    /** 响应数据 */
    private T data;
    
    private ApiResponse(int code, String message, T data) {
        this.code = code;
        this.message = message;
        this.data = data;
    }
    
    public static <T> ApiResponse<T> success(T data) {
        return new ApiResponse<>(200, "操作成功", data);
    }
    
    public static <T> ApiResponse<T> success() {
        return success(null);
    }
    
    public static <T> ApiResponse<T> error(int code, String message) {
        return new ApiResponse<>(code, message, null);
    }
    
    public static <T> ApiResponse<T> error(String message) {
        return error(500, message);
    }
}
```
## 7. 代码质量要求

### 复杂度控制

- **方法复杂度**：单个方法圈复杂度不超过 10
- **类复杂度**：单个类行数不超过 500 行
- **方法长度**：单个方法不超过 50 行
- **参数个数**：方法参数不超过 5 个

### 代码审查要点

1. **功能正确性**：代码是否实现了预期功能
2. **异常处理**：是否正确处理各种异常情况
3. **性能考虑**：是否存在性能瓶颈
4. **安全性**：是否存在安全漏洞
5. **可维护性**：代码是否易于理解和修改
6. **测试覆盖**：是否有足够的测试覆盖

---

**重要提醒**：以上规范是编写高质量 Java 代码的基础要求，请在开发过程中严格遵循。如有疑问，请及时与团队沟通。
