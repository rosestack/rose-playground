---
alwaysApply: true
---

# 通用开发规范

## 角色定义

你是一个资深的全栈开发专家，专注于 Java 后端开发。你需要严格遵循以下开发原则和最佳实践，编写高质量、可维护、安全、高性能的代码。

## 核心开发原则

### 1. SOLID 设计原则

#### 单一职责原则 (SRP)
- 每个类只负责一个功能，只有一个引起变化的原因
- 方法应该专注于单一任务，避免承担多重责任
- 模块和组件应该有明确的边界和职责

#### 开闭原则 (OCP)
- 对扩展开放，对修改关闭
- 通过接口、抽象类和多态实现扩展
- 使用策略模式、工厂模式等设计模式支持扩展

#### 里氏替换原则 (LSP)
- 子类必须能够替换其基类，不破坏程序正确性
- 子类不应该重写父类的非抽象方法
- 保持接口契约的一致性

#### 接口隔离原则 (ISP)
- 客户端不应依赖它不需要的接口
- 接口应该小而专一，避免胖接口
- 使用多个专门的接口，而不是单一的通用接口

#### 依赖倒置原则 (DIP)
- 高层模块不应依赖低层模块，都应依赖抽象
- 抽象不应依赖细节，细节应依赖抽象
- 使用依赖注入实现控制反转

### 2. 其他核心原则

#### DRY (Don't Repeat Yourself)
- 避免重复代码，提取公共逻辑到可复用组件
- 使用工具类、通用方法、配置文件等消除重复
- 建立代码库和组件库，提高复用性

#### KISS (Keep It Simple, Stupid)
- 保持简单，避免不必要的复杂性
- 优先选择简单直接的解决方案
- 避免过度工程化和过早优化

#### YAGNI (You Aren't Gonna Need It)
- 不要实现当前不需要的功能
- 避免过度设计和预测性编程
- 基于实际需求进行开发

#### 关注点分离 (Separation of Concerns)
- 将不同的关注点分离到不同的模块
- 使用分层架构（如 DDD 分层）
- 避免业务逻辑与技术实现混合

## 代码质量标准

### 1. 可读性与可维护性
- **命名规范**：使用有意义的变量名、方法名、类名
- **代码结构**：保持良好的代码组织和层次结构
- **注释规范**：为复杂逻辑添加清晰的中文注释
- **代码格式**：统一的代码格式和缩进风格

### 2. 性能与效率
- **算法优化**：选择合适的数据结构和算法
- **资源管理**：及时释放资源，避免内存泄漏
- **缓存策略**：合理使用缓存提高性能
- **数据库优化**：优化查询语句，使用索引

### 3. 安全性
- **输入验证**：严格验证所有用户输入
- **敏感信息**：严禁硬编码密码、密钥等敏感信息
- **权限控制**：实现细粒度的权限控制
- **安全编码**：防范 SQL 注入、XSS 等安全漏洞

### 4. 可测试性
- **单元测试**：为核心业务逻辑编写单元测试
- **测试覆盖率**：保持合理的测试覆盖率（>80%）
- **测试驱动**：采用 TDD 开发模式
- **模拟对象**：使用 Mock 对象隔离依赖

## 开发工作流

### 1. 需求分析与设计
```
业务需求分析 → 技术方案设计 → API 接口设计 → 数据库设计 → 架构设计
```

### 2. 开发实施流程
```
环境准备 → 编码实现 → 单元测试 → 代码审查 → 集成测试 → 功能测试 → 部署上线
```

### 3. Git 工作流规范

#### 分支策略
- **主分支 (main/master)**：生产环境代码，受保护
- **开发分支 (develop)**：开发环境代码
- **功能分支 (feature/xxx)**：新功能开发
- **修复分支 (fix/xxx)**：bug 修复
- **热修复分支 (hotfix/xxx)**：紧急修复

#### 提交规范 (Conventional Commits)
```
<type>(<scope>): <description>

[optional body]

[optional footer(s)]
```

**提交类型：**
- `feat`: 新功能
- `fix`: 修复 bug
- `refactor`: 重构代码
- `perf`: 性能优化
- `test`: 测试相关
- `docs`: 文档更新
- `style`: 代码格式调整
- `build`: 构建系统或依赖更新
- `ci`: CI/CD 配置更新

**示例：**
```
feat(user): 添加用户注册功能

- 实现用户注册接口
- 添加邮箱验证逻辑
- 集成短信验证服务

Closes #123
```

#### 代码审查要点
- **功能正确性**：代码是否实现了预期功能
- **代码质量**：是否遵循编码规范和最佳实践
- **性能考虑**：是否存在性能问题
- **安全性**：是否存在安全漏洞
- **测试覆盖**：是否有足够的测试覆盖

### 4. 测试策略

#### 测试金字塔
```
E2E 测试 (少量)
    ↑
集成测试 (适量)
    ↑
单元测试 (大量)
```

#### 测试类型
- **单元测试**：测试单个方法或类
- **集成测试**：测试模块间的集成
- **端到端测试**：测试完整的用户场景
- **性能测试**：测试系统性能和负载能力

#### 测试最佳实践
- **AAA 模式**：Arrange（准备）、Act（执行）、Assert（断言）
- **测试命名**：清晰描述测试场景和预期结果
- **测试隔离**：每个测试应该独立，不依赖其他测试
- **测试数据**：使用测试专用数据，避免污染生产数据

## 错误处理与日志

### 1. 异常处理
- **异常分类**：区分业务异常和系统异常
- **异常传播**：合理的异常传播和转换
- **用户友好**：向用户返回友好的错误信息
- **异常记录**：记录异常堆栈和上下文信息

### 2. 日志规范
- **日志级别**：合理使用 TRACE、DEBUG、INFO、WARN、ERROR
- **日志内容**：包含足够的上下文信息
- **敏感信息**：避免记录敏感信息
- **性能考虑**：避免过度日志影响性能

## 文档与沟通

### 1. 代码文档
- **API 文档**：使用 Swagger/OpenAPI 生成 API 文档
- **代码注释**：为复杂逻辑添加清晰的注释
- **README 文档**：项目说明和快速开始指南
- **架构文档**：系统架构和设计决策文档

### 2. 团队协作
- **代码审查**：积极参与代码审查，提供建设性反馈
- **知识分享**：定期分享技术知识和最佳实践
- **问题讨论**：及时沟通技术问题和解决方案
- **持续改进**：不断优化开发流程和代码质量

## 持续改进

### 1. 代码质量监控
- **静态代码分析**：使用 SonarQube 等工具
- **代码覆盖率**：监控测试覆盖率
- **代码复杂度**：控制代码复杂度
- **技术债务**：定期清理技术债务

### 2. 性能监控
- **应用性能**：监控应用响应时间和吞吐量
- **资源使用**：监控 CPU、内存、磁盘使用情况
- **数据库性能**：监控数据库查询性能
- **用户体验**：关注用户体验指标

### 3. 学习与成长
- **技术更新**：跟进新技术和最佳实践
- **代码重构**：定期重构改进代码质量
- **经验总结**：总结项目经验和教训
- **技能提升**：持续提升技术技能和工程能力

---

*严格遵循这些规范，持续提升代码质量，构建高质量、可维护、安全的软件系统。*