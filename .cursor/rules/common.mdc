---
alwaysApply: true
---
# 通用开发规则

## 项目背景

本规则适用于各种类型的软件开发项目，包括但不限于Web应用、API服务、移动应用、桌面应用等。规则重点关注开发流程、代码质量、团队协作等通用原则。

## 开发工作流

### 1. 功能开发流程
1. **需求分析**：深入理解业务需求和技术要求
2. **设计阶段**：设计系统架构、接口规范、数据结构
3. **开发阶段**：按模块并行开发，遵循测试驱动开发原则
4. **测试阶段**：单元测试、集成测试、端到端测试
5. **代码审查**：提交PR，进行代码审查
6. **部署阶段**：部署到测试环境，进行功能验证

### 2. 全栈开发流程
1. **需求分析**：理解业务需求和技术要求
2. **架构设计**：设计系统架构、接口规范、数据结构
3. **后端开发**：开发服务端逻辑、数据处理、业务逻辑
4. **前端开发**：开发用户界面、交互逻辑、数据展示
5. **集成测试**：前后端联调、端到端测试
6. **部署上线**：部署到生产环境，监控运行状态

### 3. 版本控制工作流
- **分支策略**：使用合适的分支管理策略（如Git Flow、GitHub Flow）
- **提交规范**：使用约定式提交规范
  - **类型**：feature（新功能）、fix（修复）、refactor（重构）、docs（文档）、style（格式）、test（测试）、chore（构建）
  - **描述**：简明扼要说明变更内容，使用祈使句
  - **正文**：详细阐述变更原因和背景
- **原子性提交**：每次提交只包含一个独立、完整的逻辑变更
- **频繁提交**：及时提交，减少丢失进度风险
- **PR模板**：使用标准的PR模板
- **代码审查**：所有代码变更需要经过审查
- **禁止直推主分支**：对主分支的所有更改必须通过Pull Request合并
- **敏感信息管理**：严禁提交密钥、密码、API Key等敏感信息

### 4. 测试策略
- **单元测试**：覆盖率应达到合理水平（通常>80%）
  - **测试驱动开发（TDD）**：在编写代码之前编写测试
  - **测试命名**：使用清晰且描述性的测试名称
  - **AAA模式**：使用安排-操作-断言模式结构化测试
- **集成测试**：测试组件间的交互
- **端到端测试**：测试完整的用户流程
- **性能测试**：测试系统性能和并发能力
- **避免过度模拟**：仅模拟必要的依赖以隔离被测单元

## 代码质量

### 1. 静态代码分析
- 使用代码质量分析工具
- 进行Bug检测
- 检查代码风格一致性
- 分析代码复杂度

### 2. 代码格式化
- 使用统一的代码格式化配置
- 使用代码模板提高开发效率
- 提交前自动格式化代码

### 3. 文档规范
- **API文档**：生成和维护API文档
- **代码文档**：为关键代码添加注释
- **架构文档**：维护系统架构和设计文档
- **部署文档**：维护部署和运维文档

## 性能优化

### 1. 数据访问优化
- 为查询字段创建合适的索引
- 优化查询语句，避免N+1问题
- 配置合适的数据连接池
- 大数据量查询使用分页

### 2. 缓存策略
- 缓存热点数据和计算结果
- 实现缓存更新和失效策略
- 监控缓存命中率和性能

### 3. 异步处理
- 使用异步处理耗时任务
- 使用消息队列处理异步消息
- 配置合适的线程池参数
- 设置合理的超时时间
- 使用懒加载策略
- 使用对象池复用对象
- 避免内存泄漏

## 安全要求

### 1. 认证授权
- 实现安全的用户认证机制
- 实现细粒度的权限控制
- 安全管理用户会话
- 使用强密码策略和加密存储

### 2. 数据安全
- 敏感数据加密存储
- 使用安全传输协议
- 防止SQL注入攻击
- 进行输入验证
- 防止XSS攻击

### 3. 审计日志
- 记录用户操作日志
- 记录安全相关事件
- 记录系统性能指标
- 记录系统错误和异常

## 部署运维

### 1. 容器化部署
- 构建优化的容器镜像
- 使用容器编排工具
- 实现应用健康检查接口

### 2. 监控告警
- 监控应用性能和状态
- 聚合和分析日志
- 设置合理的告警规则
- 定期进行性能分析和优化

### 3. 备份恢复
- 定期备份重要数据
- 制定灾难恢复计划
- 管理应用版本和回滚策略
- 使用配置中心管理配置

## 开发工具

### 1. IDE配置
- 使用统一的IDE配置
- 安装必要的开发插件
- 遵循一致的代码风格
- 使用自动格式化功能

### 2. 调试工具
- 使用合适的调试工具
- 使用日志记录系统
- 支持远程调试
- 进行性能分析

### 3. 版本控制
- 使用版本控制系统
- 使用代码托管平台
- 实施分支管理策略
- 配置提交前检查

## 团队协作

### 1. 沟通协作
- 及时沟通和同步进度
- 积极参与代码审查
- 分享技术经验和最佳实践
- 帮助团队成员解决问题

### 2. 知识管理
- 维护团队知识库
- 记录技术决策和架构设计
- 分享学习资源和最佳实践
- 定期进行技术分享

## 持续学习

### 1. 技术债务管理
- **定期重构**：主动发现和消除技术债务
- **代码审查**：通过代码审查识别潜在问题
- **性能监控**：持续监控系统性能指标

### 2. 文档习惯
- 保持良好的注释和文档习惯
- 及时更新相关文档
- 使用清晰的文档结构

### 3. 学习资源
- 关注官方文档和最佳实践
- 参与技术社区和会议
- 阅读技术博客和书籍

## 注意事项

### 1. 代码质量
- 保持代码简洁、可读、可维护
- 遵循SOLID、DRY、KISS、YAGNI原则
- 及时重构和优化代码
- 编写充分的测试用例
- 仅针对明确需求进行更改，避免引入不必要的新技术/模式
- 单文件过大时应重构拆分
- 严禁硬编码敏感信息，必须通过环境变量或配置中心管理

### 2. 安全考虑
- 始终考虑安全性，不仅仅是功能实现
- 定期进行安全审计
- 及时更新依赖包以修复安全漏洞
- 实施最小权限原则

### 3. 性能考虑
- 在开发初期就考虑性能问题
- 进行性能测试和优化
- 监控系统资源使用情况
- 实施合理的缓存策略

---

*此规则文件为通用软件开发提供指导，适用于各种技术栈和项目类型，请根据项目实际情况进行调整和完善。* 