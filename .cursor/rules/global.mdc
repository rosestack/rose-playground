---
description: 
globs: 
alwaysApply: true
---

# 全局代码规范

## 基本原则

- 严格遵循 **SOLID**（单一职责、开放封闭、里氏替换、接口隔离、依赖倒置）、**DRY**（不要重复自己）、**KISS**（保持简单）、**YAGNI**
  （不要做无用之事）原则。
- 接口和实现分离，面向接口编程

## 环境区分

- 编写代码时需明确区分开发、测试、生产等不同环境。
    - 配置、依赖、日志、数据源等应根据环境灵活切换。
    - 禁止在开发/生产环境中使用测试/模拟数据。

## 变更与维护

- 谨慎修改代码，仅针对明确需求进行更改，或确保修改内容与需求强相关且已被充分理解。
- 修复问题时优先排查和优化现有实现，避免轻易引入新技术/模式。
    - 如必须引入新方案，需同步移除旧逻辑，防止冗余和技术债务。
- 保持代码库整洁有序，及时清理无用代码、注释和文件。
- 控制单文件代码行数，超过 200-300 行时应重构拆分，提升可维护性。

## 配置与敏感信息

- 禁止覆盖 .env 或其他环境配置文件，修改前需确认并征得相关负责人同意。
- 敏感信息（如密钥、密码、API Key）必须通过环境变量或安全配置管理，严禁硬编码或提交到代码库。

## 关注点与范围

- 专注于当前任务相关的代码区域，不触碰与任务无关的模块或文件。
- 任何代码变更都应考虑对其他方法、模块和整体系统的影响，避免引发连锁问题。

## 测试与质量保障

- 为所有主要功能编写全面、自动化的单元测试和集成测试。
- 仅允许在测试环境中使用模拟数据，开发和生产环境必须使用真实数据源。
- 功能运行稳定后，除非有明确需求，避免对其架构和模式进行重大调整。
- 代码提交前应通过静态检查、格式化和自动化测试，确保质量。

## 代码审查与协作

- 所有重要变更应通过代码评审，确保规范一致、逻辑清晰。
- 评审时关注可读性、可维护性和潜在风险，及时响应和处理反馈。

## 其他建议

- 保持良好的注释和文档习惯，便于团队协作和后续维护。
- 定期重构和优化代码，主动发现和消除技术债务。
- 遇到疑难问题时，优先查阅文档和团队知识库，必要时及时沟通协作。
- 调用 filesystem mcp 创建文件或者目录时，使用绝对路径，以避免提示没有权限的问题
